#version 140

in vec2 textureCoords;

out vec4 out_Colour;

uniform sampler2D colourTexture;

const float brightness = 1.3;
const float contrast = 0.1;
const float saturation = 1.65;

void main(void){

	out_Colour = texture(colourTexture, textureCoords);
	
	//contrast
	out_Colour.rgb=(out_Colour.rgb-0.5)*(1+contrast)+0.5;
	
	// calculate saturation
 	vec3 luminanceWeights = vec3(0.299, 0.587, 0.114);
 	float luminance = dot(out_Colour.rgb, luminanceWeights);
 	out_Colour = mix(vec4(luminance), out_Colour, saturation);
 
 
  // calculate brightness
	 out_Colour.rgb *= brightness;
	 
	//luminamce w before b/w
//	out_Colour = vec4( vec3(out_Colour.r+out_Colour.g+out_Colour.b)/3.0, out_Colour.a);
	
	/*
	vec4 top         = texture(colourTexture, vec2(textureCoords.x, textureCoords.y + 1.0 / 200.0));
	vec4 bottom      = texture(colourTexture, vec2(textureCoords.x, textureCoords.y - 1.0 / 200.0));
	vec4 left        = texture(colourTexture, vec2(textureCoords.x - 1.0 / 300.0, textureCoords.y));
	vec4 right       = texture(colourTexture, vec2(textureCoords.x + 1.0 / 300.0, textureCoords.y));
	vec4 topLeft     = texture(colourTexture, vec2(textureCoords.x - 1.0 / 300.0, textureCoords.y + 1.0 / 200.0));
	vec4 topRight    = texture(colourTexture, vec2(textureCoords.x + 1.0 / 300.0, textureCoords.y + 1.0 / 200.0));
	vec4 bottomLeft  = texture(colourTexture, vec2(textureCoords.x - 1.0 / 300.0, textureCoords.y - 1.0 / 200.0));
	vec4 bottomRight = texture(colourTexture, vec2(textureCoords.x + 1.0 / 300.0, textureCoords.y - 1.0 / 200.0));
	vec4 sx = -topLeft - 2 * left - bottomLeft + topRight   + 2 * right  + bottomRight;
	vec4 sy = -topLeft - 2 * top  - topRight   + bottomLeft + 2 * bottom + bottomRight;
	vec4 sobel = sqrt(sx * sx + sy * sy);
	out_Colour = sobel;
	
	*/

}